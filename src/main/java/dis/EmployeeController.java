package dis;

import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

@Controller
// This means that this class is a Controller
@RequestMapping(path = "/employee")
public class EmployeeController {

	@Autowired
	private PasswordEncoder passwordEncoder;

	@Autowired
	// This means to get the bean called userRepository
	// which is auto-generated by Spring, we will use it to handle the data
	private EmployeeRepository employeeRepository;

	@Autowired
	// This means to get the bean called userRepository
	// which is auto-generated by Spring, we will use it to handle the data
	private DepartmentRepository departmentRepository;

	@Autowired
	// This means to get the bean called userRepository
	// which is auto-generated by Spring, we will use it to handle the data
	private RoleRepository roleRepository;

	@RequestMapping
	public String main() {
		return "employee";
	}

	@PreAuthorize("hasAnyRole('" + ProjectNames.ROLE_ADMIN + "','" + ProjectNames.ROLE_MANAGER + "', )")
	@GetMapping(path = "/add")
	public String createForm(Model model) {
		model.addAttribute("title", "Add a new Employee");
		model.addAttribute("employee", new Employee());
		model.addAttribute("departments", departmentRepository.findAllByOrderByNameAsc());
		model.addAttribute("accessLevel", roleRepository.findAll());
		model.addAttribute("managers", employeeRepository.findAllManagers());
		List<EmployeeType> empType = new ArrayList<EmployeeType>();
		empType.add(EmployeeType.FULL_TIME);
		empType.add(EmployeeType.PART_TIME);
		model.addAttribute("EmployeeType", empType);
		return "employeeAdd";
	}

	@PreAuthorize("hasAnyRole('" + ProjectNames.ROLE_ADMIN + "','" + ProjectNames.ROLE_MANAGER + "', )")
	@PostMapping(path = "/add")
	public ModelAndView createSubmit(@ModelAttribute @Valid Employee employee, Errors errors, Model model) {

		model.addAttribute("title", "Add a new Employee");
		if (errors.hasErrors()) {
			model.addAttribute("departments", departmentRepository.findAllByOrderByNameAsc());
			model.addAttribute("accessLevel", roleRepository.findAll());
			model.addAttribute("managers", employeeRepository.findAllManagers());
			List<EmployeeType> empType = new ArrayList<EmployeeType>();
			empType.add(EmployeeType.FULL_TIME);
			empType.add(EmployeeType.PART_TIME);
			model.addAttribute("EmployeeType", empType);
			return new ModelAndView("employeeAdd");
		}
		employee.setEnabled(true);
		employee.setPassword(passwordEncoder.encode(employee.getPassword()));
		employeeRepository.save(employee);
		// return "employeeAddResult";

		return new ModelAndView("redirect:/employee/all");
	}

	@PreAuthorize("hasAnyRole('" + ProjectNames.ROLE_ADMIN + "','" + ProjectNames.ROLE_MANAGER + "', )")
	@GetMapping(path = "/all")
	public ModelAndView readAll(Model model) {
		Iterable<Employee> findAll = employeeRepository.findAllByOrderByNameAsc();
		model.addAttribute("title", "All Employees");
		model.addAttribute("employees", findAll);

		// the users
		// return departmentRepository.findAll();
		return new ModelAndView("employeeAll");
	}

	@PreAuthorize("hasAnyRole('" + ProjectNames.ROLE_ADMIN + "','" + ProjectNames.ROLE_MANAGER + "', )")
	@GetMapping(path = "/{id}")
	public String readById(@PathVariable("id") long id, Model model) {
		model.addAttribute("employee", employeeRepository.findOne(id));
		// this returns JSON or XML with the department
		return "employeeById";

	}

	@PreAuthorize("hasAnyRole('" + ProjectNames.ROLE_ADMIN + "','" + ProjectNames.ROLE_MANAGER + "', )")
	@GetMapping(path = "/{id}/edit")
	public String createEdit(@PathVariable("id") long id, Model model) {
		// with input provided
		model.addAttribute("title", "Edit Employee");
		model.addAttribute("employee", employeeRepository.findOne(id));
		model.addAttribute("departments", departmentRepository.findAllByOrderByNameAsc());
		// this returns JSON or XML with the department
		model.addAttribute("managers", employeeRepository.findAllManagers());
		model.addAttribute("accessLevel", roleRepository.findAll());
		List<EmployeeType> empType = new ArrayList<EmployeeType>();
		empType.add(EmployeeType.FULL_TIME);
		empType.add(EmployeeType.PART_TIME);
		model.addAttribute("EmployeeType", empType);
		return "employeeEdit";

	}

	@PreAuthorize("hasAnyRole('" + ProjectNames.ROLE_ADMIN + "','" + ProjectNames.ROLE_MANAGER + "', )")
	@PostMapping(path = "/{id}/edit", params = "edit=Delete")
	public ModelAndView createEditPostDelete(@PathVariable("id") long id, Model model) {
		Employee findOne = employeeRepository.findOne(id);
		employeeRepository.delete(findOne);
		return new ModelAndView("redirect:/employee/all");
	}

	@PreAuthorize("hasAnyRole('" + ProjectNames.ROLE_ADMIN + "','" + ProjectNames.ROLE_MANAGER + "', )")
	@PostMapping(path = "/{id}/edit", params = "edit=Save")
	public ModelAndView editForm(@PathVariable("id") long id, @ModelAttribute @Valid Employee employee, Errors errors,
			Model model) {
		model.addAttribute("title", "Edit Employee");
		if (errors.hasErrors()) {
			// List<AccessLevel> accessLevel = new ArrayList<AccessLevel>();
			// accessLevel.add(AccessLevel.ADMIN);
			// accessLevel.add(AccessLevel.USER);
			model.addAttribute("accessLevel", roleRepository.findAll());
			model.addAttribute("departments", departmentRepository.findAllByOrderByNameAsc());
			model.addAttribute("managers", employeeRepository.findAllManagers());
			List<EmployeeType> empType = new ArrayList<EmployeeType>();
			empType.add(EmployeeType.FULL_TIME);
			empType.add(EmployeeType.PART_TIME);
			model.addAttribute("EmployeeType", empType);
			return new ModelAndView("employeeEdit");
		}
		// doin't create new object here, read old one by id and update its properties
		Employee dbEmployee = employeeRepository.findOne(id);
		// update the properties with values coming from model
		dbEmployee.setName(employee.getName());
		dbEmployee.setType(employee.getType());
		dbEmployee.setEmployeeNo(employee.getEmployeeNo());
		dbEmployee.setEmail(employee.getEmail());
		dbEmployee.setDepartment(employee.getDepartment());
		if (getCurrentUser().hasRole(ProjectNames.ROLE_ADMIN)) {
			dbEmployee.setPassword(passwordEncoder.encode(employee.getPassword()));
		}
		dbEmployee.setTotalAnnualHolidayDays(employee.getTotalAnnualHolidayDays());
		dbEmployee.setManager(employeeRepository.findOne(employee.getManager().getId()));
		dbEmployee.setRoles(employee.getRoles());
		// then save(update) to database
		employeeRepository.save(dbEmployee);
		return new ModelAndView("redirect:/employee/all"); // and choose template to kick in afterwards
		// and then add another method that also catches the action of deleting and
		// removes instead
		// keep in mind that you may be forced to change this one to catch the action
		// type "submit" or "save" or something like this

	}

	@PreAuthorize("hasAnyRole('" + ProjectNames.ROLE_ADMIN + "','" + ProjectNames.ROLE_MANAGER + "', )")
	@RequestMapping(path = "/delete/{id}")
	public ModelAndView createEdit(@ModelAttribute Employee employee, Model model) {
		Employee findOne = employeeRepository.findOne(employee.getId());
		employeeRepository.delete(findOne);

		return new ModelAndView("redirect:/employee/all");
	}

	private Employee getCurrentUser() {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		MyUserPrincipal principal = (MyUserPrincipal) authentication.getPrincipal();
		Employee employee = principal.getEmployee();
		return employeeRepository.findOne(employee.getId());
	}
}
