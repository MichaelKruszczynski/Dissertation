package dis;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.maven.shared.utils.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
// This means that this class is a Controller
@RequestMapping(path = "/view")
public class ReportViewController {

	@Autowired
	// This means to get the bean called userRepository
	// which is auto-generated by Spring, we will use it to handle the data
	private ReportRepository reportRepository;
	@Autowired
	private JdbcTemplate jdbcTemplate;

	@RequestMapping
	public String main() {
		return "reportViewEmpty";
	}

	@RequestMapping(path = "/{name}/**") // ** means any thing else
	public String displayView(@PathVariable("name") String name, Model model, HttpServletRequest request) {
		String uri = request.getRequestURI();
		String[] split = uri.split("/");
		List<Object> parameters = new ArrayList<Object>();
		for (int i = 0; i < split.length; i++) {
			//
			if (split[i].length() < 1 || // avoid empty values
					split[i].equals(name) || // avoid view name
					split[i].equals("view")// avoid controller path
			) {
				// skip
			} else {
				String temp = split[i];
				temp = temp.trim();
				if (StringUtils.isNumeric(temp)) { // if parameter numeric convert it to numeric or query
					parameters.add(Long.parseLong(temp));
				} else {
					parameters.add(temp);
				}
			}
		} // for loop for extracting parameters
		Report report = reportRepository.findByName(name);
		if (report == null) {
			return "empty";
		} // Object[] uuid = jdbcTemplate.queryForObject(report.getQuery(),
			// Object[].class);
			// Map<String, Object> queryForMap =
			// jdbcTemplate.queryForMap(report.getQuery());
		List<Map<String, Object>> queryForList = null;
		if ((parameters.isEmpty())) {
			queryForList = jdbcTemplate.queryForList(report.getQuery());
		} else {
			queryForList = jdbcTemplate.queryForList(report.getQuery(), parameters.toArray());
		}
		if (queryForList.isEmpty()) {
			return "empty";
		} else {
			model.addAttribute("viewResults", queryForList);
			model.addAttribute("columnNames", queryForList.iterator().next().keySet());
		}

		return "reportView";
	}

}
