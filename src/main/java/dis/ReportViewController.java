package dis;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.maven.shared.utils.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.CrudRepository;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
// This means that this class is a Controller
@RequestMapping(path = "/view")
public class ReportViewController {
	public final static String TOKEN_DELIMITER = ":";
	@Autowired
	// This means to get the bean called userRepository
	// which is auto-generated by Spring, we will use it to handle the data
	private ReportRepository reportRepository;
	@Autowired
	private JdbcTemplate jdbcTemplate;
	@Autowired
	private CrudRepository<Employee, Long> employeeRepository;

	@RequestMapping
	public String main() {
		return "reportViewEmpty";
	}

	@RequestMapping(path = "/{name}/**") // ** means any thing else
	public String displayView(@PathVariable("name") String name, Model model, HttpServletRequest request) {

		String uri = request.getRequestURI();
		String[] split = uri.split("/");
		List<Object> parameters = new ArrayList<Object>();
		for (int i = 0; i < split.length; i++) {
			//
			if (split[i].length() < 1 || // avoid empty values
					split[i].equals(name) || // avoid view name
					split[i].equals("view")// avoid controller path
			) {
				// skip
			} else {
				String temp = split[i];
				temp = temp.trim();
				if (StringUtils.isNumeric(temp)) { // if parameter numeric convert it to numeric or query
					parameters.add(Long.parseLong(temp));
				} else {
					parameters.add(temp);
				}
			}
		} // for loop for extracting parameters
		Report report = reportRepository.findByName(name);
		if (report == null) {
			return "empty";
		}
		String reportRole = report.getRole().getName();

		boolean authenticated = false;
		switch (reportRole) {
		case ProjectNames.ROLE_USER:
			authenticated = true;
		case ProjectNames.ROLE_MANAGER:
			authenticated = getCurrentUser().hasRole(reportRole);
		default:
			authenticated = getCurrentUser().hasRole(ProjectNames.ROLE_ADMIN);
			break;
		}
		if (!authenticated) {
			return "accessDenied";
		}
		// Object[] uuid = jdbcTemplate.queryForObject(report.getQuery(),
		// Object[].class);
		// Map<String, Object> queryForMap =
		// jdbcTemplate.queryForMap(report.getQuery());
		List<Map<String, Object>> queryForList = null;
		String query = report.getQuery();
		query = new QueryTokenizer().deTokenize(query);
		if ((parameters.isEmpty())) {
			queryForList = jdbcTemplate.queryForList(query);
		} else {
			queryForList = jdbcTemplate.queryForList(query, parameters.toArray());
		}
		if (queryForList.isEmpty()) {
			return "empty";
		} else {
			model.addAttribute("viewResults", queryForList);
			model.addAttribute("columnNames", queryForList.iterator().next().keySet());
		}

		return "reportView";
	}

	private Employee getCurrentUser() {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		MyUserPrincipal principal = (MyUserPrincipal) authentication.getPrincipal();
		Employee employee = principal.getEmployee();
		return employeeRepository.findOne(employee.getId());
	}

}
