package dis;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
// This means that this class is a Controller
@RequestMapping(path = "/report")

public class ReportController {
	public static final String outversionedTrainingRecordsQuery = "select z.empEmail 'Employee email',z.trainName 'Training name',z.maxAchi 'Current version',z.topV 'Newest version' from (select emp.email 'empEmail',train.name 'trainName',max(train.version) 'maxAchi',(select  max(train2.version) from training train2  where train2.name=train.name) 'topV' from training_record tr inner join training train on tr.training_id=train.id  inner join Employee emp on emp.id=tr.employee_id group by emp.email,train.name) z where  z.maxAchi<z.topV;";
	public static final String outdatedTrainingRecordsQuery = "select tr.id,tr.day,emp.email 'Employee email', train.name 'Training Name', max(train.version) 'Latest version', tr.day 'Training passed' from training_record tr inner join training train on train.id=tr.training_id inner join Employee emp on emp.id=tr.employee_id where (DATE_ADD(tr.day, INTERVAL train.duration DAY))<CURDATE() group by tr.employee_id,train.name order by train.version asc";

	@Autowired
	// This means to get the bean called userRepository
	// which is auto-generated by Spring, we will use it to handle the data
	private ReportRepository reportRepository;
	@Autowired
	private RoleRepository roleRepository;

	@RequestMapping
	public String main() {
		return "report";
	}

	@PreAuthorize("hasAnyRole('" + ProjectNames.ROLE_ADMIN + "','" + ProjectNames.ROLE_MANAGER + "', )")
	@GetMapping(path = "/add")

	public String createForm(Model model) {
		model.addAttribute("title", "Add a new Report");
		model.addAttribute("report", "reportAdd");
		model.addAttribute(new Report());
		model.addAttribute("accessLevel", roleRepository.findAll());
		return "reportAdd";
	}

	@PreAuthorize("hasAnyRole('" + ProjectNames.ROLE_ADMIN + "','" + ProjectNames.ROLE_MANAGER + "', )")
	@PostMapping(path = "/add")
	public String createSubmit(@ModelAttribute @Valid Report report, Errors errors, Model model) {
		model.addAttribute("title", "Add a new Report");
		if (errors.hasErrors()) {

			model.addAttribute("accessLevel", roleRepository.findAll());
			return "reportAdd";
		}

		reportRepository.save(report);
		return "reportAddResult";
	}

	@PreAuthorize("hasAnyRole('" + ProjectNames.ROLE_ADMIN + "','" + ProjectNames.ROLE_MANAGER + "', )")
	@GetMapping(path = "/all")
	public String readAll(Model model) {
		Iterable<Report> findAll = reportRepository.findAll();
		model.addAttribute("title", "All Reports");
		model.addAttribute("reports", findAll);
		// this returns JSON or XML with the users
		// return departmentRepository.findAll();
		return "reportAll";
	}

	@PreAuthorize("hasAnyRole('" + ProjectNames.ROLE_ADMIN + "','" + ProjectNames.ROLE_MANAGER + "', )")
	@GetMapping(path = "/{id}")
	public String readById(@PathVariable("id") long id, Model model) {
		model.addAttribute("report", reportRepository.findOne(id));
		model.addAttribute("title", "Edit Report");
		// this returns JSON or XML with the department
		return "reportById";

	}

	@PreAuthorize("hasAnyRole('" + ProjectNames.ROLE_ADMIN + "','" + ProjectNames.ROLE_MANAGER + "', )")
	// @ TODO
	@GetMapping(path = "/{id}/edit")
	public String createEdit(@PathVariable("id") long id, Model model) {
		// with input provided
		model.addAttribute("report", reportRepository.findOne(id));
		model.addAttribute("accessLevel", roleRepository.findAll());
		model.addAttribute("title", "Edit Report");
		// this returns JSON or XML with the department
		return "reportEdit";

	}

	@PreAuthorize("hasAnyRole('" + ProjectNames.ROLE_ADMIN + "','" + ProjectNames.ROLE_MANAGER + "', )")
	@PostMapping(path = "/{id}/edit", params = "edit=Delete")
	public String createEditPostDelete(@PathVariable("id") long id, Model model) {
		Report findOne = reportRepository.findOne(id);
		reportRepository.delete(findOne);
		return readAll(model);
	}

	@PreAuthorize("hasAnyRole('" + ProjectNames.ROLE_ADMIN + "','" + ProjectNames.ROLE_MANAGER + "', )")
	@PostMapping(path = "/{id}/edit", params = "edit=Save")
	public String editForm(@PathVariable("id") long id, @ModelAttribute @Valid Report report, Errors errors,
			Model model) {
		if (errors.hasErrors()) {
			model.addAttribute("accessLevel", roleRepository.findAll());
			return "reportEdit";
		}
		// doin't create new object here, read old one by id and update its properties
		Report dbReport = reportRepository.findOne(id);
		// update the properties with values comming from model
		dbReport.setName(report.getName());
		dbReport.setQuery(report.getQuery());
		dbReport.setColumnNames(report.getColumnNames());
		dbReport.setRole(report.getRole());
		// then save(update) to database
		reportRepository.save(dbReport);
		return readAll(model); // and choose template to kick in afterwards
		// and then add another method that also catches the action of deleting and
		// removes instead
		// keep in mind that you may be forced to change this one to catch the action
		// type "submit" or "save" or something like this

	}

	@PreAuthorize("hasAnyRole('" + ProjectNames.ROLE_ADMIN + "','" + ProjectNames.ROLE_MANAGER + "', )")
	@RequestMapping(path = "/delete/{id}")
	public String createEdit(@ModelAttribute Report report, Model model) {
		Report findOne = reportRepository.findOne(report.getId());
		reportRepository.delete(findOne);

		return readAll(model);
	}
}
